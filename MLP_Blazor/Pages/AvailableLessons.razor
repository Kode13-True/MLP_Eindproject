@page "/AvailableLessons"

@inject IMapper Mapper
@inject HttpClient Client
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider


@if (lessonsVM == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>

}
else
{
    <div class="container-fluid p-md-5">
        <h1 class="display-3">Available lessons</h1>
        <hr class="my-4">
        <div class="container pb-2">
            <EditForm Model="searchLessonVM" OnValidSubmit="SearchLessons">

                <div class="row mb-1">
                    <div class="col-md-2"></div>
                    <label class="col-md-1 form-label" for="name">Name</label>
                    <div class="col-md-2">
                        <input class="form form-control" type="search" id="name" placeholder="Teacher last name" @bind-value="searchLessonVM.TeacherName" />
                    </div>
                    <div class="col-md-2"></div>
                    <label class="col-md-1 form-label" for="postal">Postal</label>
                    <div class="col-md-2">
                        <input class="form form-control" type="search" placeholder="Postal" id="postal" @bind-value="searchLessonVM.Postal" />
                    </div>
                </div>
                <div class="row mb-1">
                    <div class="col-md-2"></div>
                    <label class="col-md-1 form-label" for="instrument">Instrument</label>
                    <div class="col-md-2">
                        <InputSelect @bind-Value="searchLessonVM.InstrumentName" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px;focus:invisible")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                            <option></option>
                            @foreach (var value in Enum.GetValues(typeof(InstrumentName)))
                                {
                                <option>@value</option>
                                }
                        </InputSelect>
                    </div>
                    <div class="col-md-2"></div>
                    <label class="col-md-1 form-label" for="style">Style</label>
                    <div class="col-md-2">
                        <InputSelect @bind-Value="searchLessonVM.InstrumentStyle" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                            <option></option>
                            @foreach (var value in Enum.GetValues(typeof(InstrumentStyle)))
                                {
                                <option>@value</option>
                                }
                        </InputSelect>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col-md-2"></div>
                    <label class="col-md-1 form-label">Max Price</label>
                    <div class="col-md-2">
                        <input class="form-range" type="range" style="width:100%;" placeholder="Price" @bind-value="searchLessonVM.Price" min="@minValue" max="@maxValue" />
                    </div>
                    <div class="col-md-1">
                        <label class="form-label">@searchLessonVM.Price</label>
                    </div>

                    <div class="row mb-1">

                        <div class="col-md-12 text-center">
                            <button class="btn btn-primary w-50 m-1" type="submit">Search</button>
                            <button class="btn btn-succes w-25 m-1" @onclick="ResetSearchParameters">Reset</button>
                        </div>
                    </div>

                </div>
            </EditForm>
            <table class="table table-striped table-hover m-auto">
                <thead>
                    <tr>
                        <th><div class="d-block">Instrument</div></th>
                        <th><div class="d-block">Style</div></th>
                        <th><div class="d-none d-md-block">Level</div></th>
                        <th><div class="d-block">Location</div></th>
                        <th><div class="d-none d-md-block">Date</div></th>
                        <th><div class="d-none d-md-block">Start</div></th>
                        <th><div class="d-none d-md-block">End</div></th>
                        <th><div class="d-none d-md-block">Teacher</div></th>
                        <th><div class="d-none d-md-block">Price</div></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var lesson in lessonsVM)
                    {

                    <tr @onclick="() => LessonDetails(lesson.Id)">
                        <td><div class="d-block">@lesson.InstrumentName</div></td>
                        <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                        <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                        <td><div class="d-block">@lesson.Postal @lesson.Township</div></td>
                        <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                        <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                        <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                        <td><div class="d-none d-md-block">@lesson.TeacherFirstName @lesson.TeacherLastName</div></td>
                        @if (lesson.Price == 0)
                        {
                            <td><div class="d-none d-md-block">Free</div></td>
                        }
                        else
                        {
                            <td><div class="d-none d-md-block">&euro;@lesson.Price</div></td>
                        }

                    </tr>
                    }
                </tbody>
            </table>
        </div> 
    </div>
}




@code {
    private List<ResponseLessonVM> lessonsVM = new List<ResponseLessonVM>();

    int maxValue = 0;
    int minValue = 100;

    SearchLessonVM searchLessonVM = new SearchLessonVM();

    protected override async Task OnInitializedAsync()
    {
        await Authentication();

        var lessons = await Client.GetFromJsonAsync<List<ResponseLessonDTO>>("https://localhost:44397/api/Lesson/GetAllUnbooked");
        var allLessonsVM = Mapper.Map<List<ResponseLessonVM>>(lessons);        
        foreach (var lesson in allLessonsVM)
        {
            if (lesson.Start > DateTime.Now)
            {
                lessonsVM.Add(lesson);
            }
            if (lesson.Price > maxValue)
            {
                var price = Math.Ceiling(lesson.Price);
                maxValue = Convert.ToInt32(price);
            }
            if (lesson.Price < minValue)
            {
                var price = Math.Floor(lesson.Price);
                minValue = Convert.ToInt32(price);
            }
        }        
    }

    public async void SearchLessons()
    {
        await Authentication();

        if (searchLessonVM.TeacherName is "")
        {
            searchLessonVM.TeacherName = null;
        }
        if (searchLessonVM.Postal is "")
        {
            searchLessonVM.Postal = null;
        }

        lessonsVM.Clear();
        var responseSearch = await Client.PostAsJsonAsync("https://localhost:44397/api/search/SearchLessons", searchLessonVM);
        if (responseSearch.IsSuccessStatusCode)
        {
            var responseString = await responseSearch.Content.ReadAsStringAsync();
            var lessons = (List<ResponseLessonDTO>)JsonConvert.DeserializeObject(responseString, typeof(List<ResponseLessonDTO>));
            var allLessonsVM = Mapper.Map<List<ResponseLessonVM>>(lessons);
            var lessonsTempVM = new List<ResponseLessonVM>();
            foreach (var lesson in allLessonsVM)
            {
                if (lesson.Start > DateTime.Now)
                {
                    lessonsTempVM.Add(lesson);
                }
                if (lesson.Price > maxValue)
                {
                    var price = Math.Ceiling(lesson.Price);
                    maxValue = Convert.ToInt32(price);
                }
                if (lesson.Price < minValue)
                {
                    var price = Math.Floor(lesson.Price);
                    minValue = Convert.ToInt32(price);
                }
            }
            lessonsVM = lessonsTempVM.OrderBy(x => x.Start).ToList();
        }
        NotifyChangedState();
    }

    public void ResetSearchParameters()
    {
        searchLessonVM.InstrumentName = null;
        searchLessonVM.InstrumentStyle = null;
        searchLessonVM.Postal = null;
        searchLessonVM.TeacherName = null;
        searchLessonVM.Price = null;
    }




    //methods

    public void LessonDetails(int id)
    {
        NavManager.NavigateTo($"/lessondetails/{id}");
    }

    private void NotifyChangedState() => StateHasChanged();

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
