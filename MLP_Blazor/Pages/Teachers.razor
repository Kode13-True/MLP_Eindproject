@page "/Teachers"

@inject HttpClient Client
@inject IMapper _mapper
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="container-fluid p-5">
    <h1 class="display-3">Teachers Overview</h1>
    <hr class="my-4">
</div>
@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container align-content-center p-5">
        <div class="card-columns">
            <div class="row">

                @foreach (var teacher in teachers)
                {

                    <div class="card d-inline-block m-2" style="width: 18rem;">
                        <div class="card-body align-content-center">
                            <h5 class="card-title text-center">@teacher.FirstName @teacher.LastName</h5>
                            <h6 class="card-title text-center">Mubster since : @teacher.DOC.ToShortDateString()</h6>
                            <p class="card-text overflow-hidden" style="height: 4.5rem">@teacher.Description</p>
                            <p class="card-footer text-center">Rating = @teacher.Rating</p>
                            <a href="TeacherDetails/@teacher.Id" class="btn btn-succes w-100">More info</a>
                        </div>
                    </div>


                }

            </div>
        </div>
    </div>
}

@code {
    private List<ResponseTeacherVM> teachers = new List<ResponseTeacherVM>();

    protected override async Task OnInitializedAsync()
    {
        await Authentication();
        var teachersDTO = await Client.GetFromJsonAsync<List<ResponseTeacherDTO>>("https://localhost:44397/api/Teacher/GetAll");
        teachers = _mapper.Map<List<ResponseTeacherVM>>(teachersDTO);
        foreach(var teacher in teachers)
        {
            if(teacher.Rating == "0")
            {
                teacher.Rating = "N/A";
            }
            if(teacher.Description is not null)
            {
                if (teacher.Description.Length > 80)
                {
                    teacher.Description = teacher.Description.Substring(0, 80);
                    if (teacher.Description.EndsWith("."))
                    {
                        teacher.Description += "..";
                    }
                    else { teacher.Description += "..."; }
                }
            }

        }
    }

    //methods
    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
