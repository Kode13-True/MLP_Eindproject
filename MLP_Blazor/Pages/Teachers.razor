@page "/Teachers"

@inject HttpClient Client
@inject IMapper _mapper

<div class="container-fluid p-5">
    <h1 class="display-3">Teachers Overview</h1>
    <hr class="my-4">
</div>
@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container align-content-center p-5">
        <div class="card-columns">
            <div class="row">

                @foreach (var teacher in teachers)
                {

                    <div class="card d-inline-block m-2" style="width: 18rem;">
                        <img src="/images/users.png" class="card-img-top" alt="...">

                        <div class="card-body align-content-center">
                            <h5 class="card-title text-center">@teacher.FirstName @teacher.LastName</h5>
                            <h6 class="card-title text-center">Mubster since : @teacher.DOC.ToShortDateString()</h6>
                            <p class="card-text overflow-hidden" style="height: 10vh; max-height:10vh;">@teacher.Description</p>
                            <p class="card-footer text-center">Rating = @teacher.Rating</p>
                            <a href="TeacherDetails/@teacher.Id" class="btn btn-primary w-100">More info</a>
                        </div>
                    </div>


                }

            </div>
        </div>
    </div>
}

@code {
    private List<ResponseTeacherVM> teachers = new List<ResponseTeacherVM>();

    protected override async Task OnInitializedAsync()
    {
        var teachersDTO = await Client.GetFromJsonAsync<List<ResponseTeacherDTO>>("https://localhost:44397/api/Teacher/GetAll");
        teachers = _mapper.Map<List<ResponseTeacherVM>>(teachersDTO);
    }
}
