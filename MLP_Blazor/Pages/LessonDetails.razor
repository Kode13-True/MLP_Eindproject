@page "/LessonDetails/{lessonId:int}"


@inject IMapper _mapper
@inject HttpClient Client
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthStateProvider

<CascadingAuthenticationState>
    <div class="container-fluid p-5">
        <h1 class="display-3">Lesson Details</h1>
        <hr class="my-4">
        <div class="container align-content-center p-5">
            <div class="card-columns">
                <div class="row">
                    <div class="card d-inline-block m-auto" style="width: 54rem;">

                        <div class="card-body align-content-center">
                            <h5 class="card-title text-center">@lesson.InstrumentName @lesson.InstrumentStyle</h5>
                            <hr />
                            <div id="errorMessage" hidden="@hiddenMessage" class="alert alert-info col-md-12">@message <span @onclick="HideMessage">x</span></div>
                            <div id="AreYouSureMessage" hidden="@hiddenDeleteMessage" class="alert alert-info col-md-12">
                                Are you sure?<span @onclick="YesDelete">[yes]</span>/<span @onclick="NoDelete">[no]</span>
                            </div>
                            <div id="AreYouSureMessage" hidden="@hiddenCancelMessage" class="alert alert-info col-md-12">
                                Are you sure?<span @onclick="YesCancel">[yes]</span>/<span @onclick="NoCancel">[no]</span>
                            </div>
                            <div id="GiveRatingMessage" hidden="@hiddenRateMessage" class="alert alert-info col-md-12">
                                Give a rating from 1 to 5 please:
                                <EditForm Model="Rating" OnValidSubmit="GiveRating">
                                    <InputSelect @bind-Value="Rating">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                    </InputSelect>
                                    <button class="btn" type="submit">submit</button>
                                </EditForm>
                            </div>
                            <p class="card-text text-center">Difficulty: @lesson.LessonLevel</p>
                            <p class="card-text text-center">Start: @lesson.Start.ToShortTimeString() @lesson.Start.ToShortDateString()</p>
                            <p class="card-text text-center">Stop: @lesson.Stop.ToShortTimeString() @lesson.Stop.ToShortDateString()</p>
                            <p class="card-text text-center">Address: @lesson.Street @lesson.Number, @lesson.Postal @lesson.Township</p>
                            <p class="card-text text-center">Teacher: @lesson.TeacherFirstName @lesson.TeacherLastName</p>
                            
                            <AuthorizeView>
                                <Authorized>
                                    @if (context.User.IsInRole("Student"))
                                    {
                                        <button hidden="@hiddenBookButton" class="btn btn-primary w-100" @onclick="BookLesson">Book Lesson</button>
                                        <button hidden="@hiddenCancelButton" class="btn btn-primary w-100" @onclick="CancelLesson">Cancel Lesson</button>
                                        <button hidden="@hiddenRateButton" class="btn btn-primary w-100" @onclick="RateLesson">Rate Lesson</button>
                                    }
                                    @if (context.User.IsInRole("Teacher"))
                                    {
                                        <button hidden="@hiddenEditButton" @onclick="EditLesson" class="btn btn-primary w-100">Edit Lesson</button>
                                        <button hidden="@hiddenDeleteButton" @onclick="DeleteLesson" class="btn btn-primary w-100">Delete Lesson</button>
                                    }
                                    @if (context.User.IsInRole("Admin"))
                                    {
                                        <button hidden="@hiddenCancelButton" class="btn btn-primary w-100" @onclick="CancelLesson">Cancel Lesson</button>
                                        <button hidden="@hiddenEditButton" @onclick="EditLesson" class="btn btn-primary w-100">Edit Lesson</button>
                                        <button hidden="@hiddenDeleteButton" @onclick="DeleteLesson" class="btn btn-primary w-100">Delete Lesson</button>
                                    }
                                </Authorized>
                            </AuthorizeView>

                            <a href="/availableLessons" class="btn btn-primary w-100">Back to list</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</CascadingAuthenticationState>

@code {
    public ResponseLessonVM lesson = new ResponseLessonVM();

    LocalAuthUser user;

    string message = string.Empty;

    public int Rating = 1;

    public bool hiddenMessage = true;
    public bool hiddenDeleteMessage = true;
    public bool hiddenCancelMessage = true;
    public bool hiddenRateMessage = true;
    public bool hiddenBookButton = false;
    public bool hiddenCancelButton = true;
    public bool hiddenEditButton = true;
    public bool hiddenDeleteButton = true;
    public bool hiddenRateButton = true;

    ResponseLessonDTO lessonDTO;

    [Parameter]
    public int lessonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Authentication();

        user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        lessonDTO = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/GetOne/" + lessonId);
        lesson = _mapper.Map<ResponseLessonVM>(lessonDTO);
        if (lesson.StudentId is not null)
        {
            hiddenBookButton = true;
        }
        if(user is not null)
        {
            if (lesson.StudentId == user.Id)
            {
                if(lesson.Start > DateTime.Now.AddHours(48)) { hiddenCancelButton = false; }
                if(lesson.Stop < DateTime.Now && lesson.Completed == false) { hiddenRateButton = false; }

            }
            if(lesson.TeacherId == user.Id)
            {
                if (lesson.StudentId is null)
                {
                    hiddenEditButton = false;
                    hiddenDeleteButton = false;
                }
                else if(lesson.Start > DateTime.Now.AddHours(24))
                {
                    hiddenDeleteButton = false;
                }
            }
            if (user.Role.Equals(PersonType.Admin))
            {
                hiddenCancelButton = false;
                hiddenEditButton = false;
                hiddenDeleteButton = false;
            }
        }


    }

    //bookingForStudent

    public async void BookLesson()
    {
        if (user is not null)
        {
            await Authentication();
            var bookingResponse = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/BookLesson/" + user.Id + "/" + lessonId);
            if (bookingResponse is not null)
            {
                var alert = new CreateAlertDTO { AlertType = AlertType.Booked, Message = $"Your lesson on {bookingResponse.Start.ToShortDateString()} has been booked.", PersonId = bookingResponse.TeacherId.GetValueOrDefault() };
                var alertResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/alert/create", alert);
                if (alertResponse.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo("/account");
                }
                else
                {
                    message = "The alert has failed.";
                    hiddenMessage = false;
                }

            }
            else
            {
                message = "Lesson has already been booked.";
                hiddenMessage = false;
            }
        }
        else
        {
            NavManager.NavigateTo("/Auth/login");
        }
        lessonDTO = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/getone/" + lessonId);
        lesson = _mapper.Map<ResponseLessonVM>(lessonDTO);
        if (lesson.StudentId is not null)
        {
            hiddenBookButton = true;
        }
        if (lesson.StudentId == user.Id && lesson.Start > DateTime.Now.AddHours(48))
        {
            hiddenCancelButton = false;
        }

        NotifyChangedState();
    }



    //CancelLessonForStudent

    public async void CancelLesson()
    {
        await Authentication();
        hiddenCancelMessage = false;
        NotifyChangedState();
    }

    public async void YesCancel()
    {
        hiddenCancelMessage = true;

        if (user is not null)
        {
            var cancelResponse = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/CancelLesson/" + lessonId);
            if (cancelResponse is not null)
            {
                var alert = new CreateAlertDTO { AlertType = AlertType.Cancelled, Message = $"Your lesson on {cancelResponse.Start.ToShortDateString()} has been cancelled.", PersonId = cancelResponse.TeacherId.GetValueOrDefault() };
                var alertResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/alert/create", alert);
                if (alertResponse.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo("/account");
                }
                else
                {
                    message = "The alert has failed.";
                    hiddenMessage = false;
                }
            }
            else
            {
                message = "Lesson cancel did not succeed.";
                hiddenMessage = false;
            }

        }
        else
        {
            NavManager.NavigateTo("/Auth/login");
        }
        lessonDTO = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/getone/" + lessonId);
        lesson = _mapper.Map<ResponseLessonVM>(lessonDTO);
        if (lesson.StudentId is null)
        {
            hiddenBookButton = false;
            hiddenCancelButton = true;
        }

        NotifyChangedState();
    }
    public void NoCancel()
    {
        hiddenCancelMessage = true;
    }

    //Rate Lesson

    public void RateLesson()
    {
        hiddenRateButton = true;
        hiddenRateMessage = false;
    }

    public async void GiveRating()
    {
        hiddenRateMessage = true;
        var rating = new GiveRatingDTO { LessonId = lessonId, TeacherId = lesson.TeacherId.GetValueOrDefault(), Rating = Rating };

        var ratingResponse = await Client.PutAsJsonAsync("https://localhost:44397/api/student/RateTeacher", rating);
        if (ratingResponse.IsSuccessStatusCode)
        {

            var lessonContent = await ratingResponse.Content.ReadAsStringAsync();
            var ratedLesson = (ResponseLessonDTO)JsonConvert.DeserializeObject(lessonContent, typeof(ResponseLessonDTO));
            if (ratedLesson is not null)
            {
                var alert = new CreateAlertDTO { AlertType = AlertType.Rate, Message = $"Your lesson on {ratedLesson.Start.ToShortDateString()} has been rated {Rating}/5.", PersonId = ratedLesson.TeacherId.GetValueOrDefault() };
                var alertResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/alert/create", alert);
                if (alertResponse.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo("/account");
                }
                else
                {
                    message = "The alert has failed.";
                    hiddenMessage = false;
                }
            }
            else
            {
                message = "Rated lesson not found.";
                hiddenMessage = false;
            }

        }
        else
        {
            message = "The rating has failed, please try again at a later date.";
            hiddenMessage = false;
        }
        NotifyChangedState();
    }


    //EditLesson

    public async void EditLesson()
    {
        await Authentication();
        NavManager.NavigateTo($"/editlesson/{lessonId}");

    }


    //LessonDeleteForTeacher

    public async void DeleteLesson()
    {
        await Authentication();

        hiddenDeleteMessage = false;
        NotifyChangedState();
    }

    public async void YesDelete()
    {
        hiddenDeleteMessage = true;

        if(user is not null)
        {
            var instrumentDTO = await Client.GetFromJsonAsync<ResponseInstrumentDTO>("https://localhost:44397/api/instrument/GetOneByLessonId/" + lessonId);
            if (instrumentDTO is not null)
            {
                var responseInstrumentDelete = await Client.DeleteAsync("https://localhost:44397/api/instrument/Delete/" + instrumentDTO.Id);
                if (responseInstrumentDelete.IsSuccessStatusCode)
                {
                    var responseLessonDelete = await Client.DeleteAsync("https://localhost:44397/api/lesson/DeleteLesson/" + lessonId);
                    if (responseLessonDelete.IsSuccessStatusCode)
                    {
                        var lessonContent = await responseLessonDelete.Content.ReadAsStringAsync();
                        var deletedLesson = (ResponseLessonDTO)JsonConvert.DeserializeObject(lessonContent, typeof(ResponseLessonDTO));

                        var responseLocationDelete = await Client.DeleteAsync("https://localhost:44397/api/location/delete/" + deletedLesson.LocationId);
                        if (responseLessonDelete.IsSuccessStatusCode)
                        {
                            if(deletedLesson.StudentId is not null)
                            {
                                var alert = new CreateAlertDTO { AlertType = AlertType.Cancelled, Message = $"Your lesson on {deletedLesson.Start.ToShortDateString()} has been cancelled.", PersonId = deletedLesson.StudentId.GetValueOrDefault() };
                                var alertResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/alert/create", alert);
                                if (alertResponse.IsSuccessStatusCode)
                                {
                                    NavManager.NavigateTo("/account");
                                }
                            }
                            else
                            {
                                NavManager.NavigateTo("/account");
                            }
                        }
                        else
                        {
                            message = "Something wnet wrong while deleting the location.";
                            hiddenMessage = false;
                        }
                    }
                    else { message = "Somthing went wrong while deleting the lesson."; }
                    hiddenMessage = false;
                }
                else { message = "Something went wrong while deleting the instrument."; }
                hiddenMessage = false;
            }
            else { message = "Something went wrong while trying to find the instrument."; }
            hiddenMessage = false;
        }
        else
        {
            NavManager.NavigateTo("/auth/login");
        }

        NotifyChangedState();
    }

    public void NoDelete()
    {
        hiddenDeleteMessage = true;
    }



    //Methods

    private void NotifyChangedState() => StateHasChanged();


    public void HideMessage()
    {
        hiddenMessage = true;
    }

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }

}
