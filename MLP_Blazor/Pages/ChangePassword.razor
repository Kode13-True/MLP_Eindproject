@page "/changePassword"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<div class="container-fluid p-5">

    <CascadingAuthenticationState>
        <h1 class="display-3">Mubster Password Edit</h1>
        <hr class="my-4">
        <div class="container">
            <AuthorizeView>
                <Authorized>
                    <div class="row">
                        <div class="col-md-2"></div>
                        <div class="col-md-8">
                            <div id="errorMessage" hidden="@hiddenMessage" class="alert alert-danger col-md-12 text-center">
                                @message <span @onclick="HideMessage" class="float-end" style="cursor:pointer">x</span>
                            </div>
                        </div>
                        <div class="col-md-2"></div>
                    </div>
                    
                    @if (@context.User.IsInRole("Admin"))
                    {
                        <EditForm Model="editPasswordVM" OnValidSubmit="EditAdmin" Context="EditPassword">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-2"></div>
                                <div class="col-md-8">
                                    <div><ValidationSummary /></div>
                                </div>
                                <div class="col-md-2"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Old Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Old Password" @bind-value="editPasswordVM.OldPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="New Password" @bind-value="editPasswordVM.NewPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Confirm New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Confirm New Password" @bind-value="editPasswordVM.ConfirmNewPassword" />
                                </div>
                            </div>


                            <div class="row pt-1">
                                <div class="col-md-4"></div>
                                <div class="col-md-3 float-end">
                                    <a href="Account" class="btn btn-primary w-50 m-1 float-end">Back</a>
                                </div>
                                <div class="col-md-3">
                                    <button class="btn btn-succes w-50 m-1" type="submit">Save</button>
                                </div>
                            </div>

                        </EditForm>
                    }
                    else if (@context.User.IsInRole("Teacher"))
                    {
                        <EditForm Model="editPasswordVM" OnValidSubmit="EditTeacher" Context="EditPassword">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-2"></div>
                                <div class="col-md-8">
                                    <div><ValidationSummary /></div>
                                </div>
                                <div class="col-md-2"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Old Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Old Password" @bind-value="editPasswordVM.OldPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="New Password" @bind-value="editPasswordVM.NewPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Confirm New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Confirm New Password" @bind-value="editPasswordVM.ConfirmNewPassword" />
                                </div>
                            </div>


                            <div class="row pt-1">
                                <div class="col-md-4"></div>
                                <div class="col-md-3 float-end">
                                    <a href="Account" class="btn btn-primary w-50 m-1 float-end">Back</a>
                                </div>
                                <div class="col-md-3">
                                    <button class="btn btn-succes w-50 m-1" type="submit">Save</button>
                                </div>
                            </div>

                        </EditForm>
                    }
                    else if (@context.User.IsInRole("Student"))
                    {

                        <EditForm Model="editPasswordVM" OnValidSubmit="EditStudent" Context="EditPassword">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-2"></div>
                                <div class="col-md-8">
                                    <div><ValidationSummary /></div>
                                </div>
                                <div class="col-md-2"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Old Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Old Password" @bind-value="editPasswordVM.OldPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="New Password" @bind-value="editPasswordVM.NewPassword" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Confirm New Password</label>
                                <div class="col-md-6">
                                    <input type="password" class="form form-control" placeholder="Confirm New Password" @bind-value="editPasswordVM.ConfirmNewPassword" />
                                </div>
                            </div>


                            <div class="row pt-1">
                                <div class="col-md-4"></div>
                                <div class="col-md-3 float-end">
                                    <a href="Account" class="btn btn-primary w-50 m-1 float-end">Back</a>
                                </div>
                                <div class="col-md-3">
                                    <button class="btn btn-succes w-50 m-1" type="submit">Save</button>
                                </div>
                            </div>

                        </EditForm>
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="container">
                        <div class="text-center"> login please !</div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </CascadingAuthenticationState>
</div>


@code {
    public EditPasswordVM editPasswordVM = new EditPasswordVM();

    bool hiddenMessage = true;
    string message = string.Empty;

    LocalAuthUser user;

    protected override async Task OnInitializedAsync()
    {
        await Authentication();
        user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");
    }

    public async void EditAdmin()
    {
        await Authentication();
        if (editPasswordVM.NewPassword == editPasswordVM.ConfirmNewPassword)
        {
            var editPwDTO = _mapper.Map<EditPasswordDTO>(editPasswordVM);
            var response = await Client.PutAsJsonAsync("https://localhost:44397/api/admin/UpdatePassword/" + user.Id, editPwDTO);
            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/Account");
            }
            else
            {
                message = "Old Password Incorrect";
                hiddenMessage = false;
            }
        }
        else 
        {
            message = "Passwords are not the same";
            hiddenMessage = false;
        }

        NotifyChangedState();
    }
    public async void EditTeacher()
    {
        await Authentication();
        if (editPasswordVM.NewPassword == editPasswordVM.ConfirmNewPassword)
        {
            var editPwDTO = _mapper.Map<EditPasswordDTO>(editPasswordVM);
            var response = await Client.PutAsJsonAsync("https://localhost:44397/api/teacher/UpdatePassword/" + user.Id, editPwDTO);
            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/Account");
            }
            else
            {
                message = "Old Password Incorrect";
                hiddenMessage = false;
            }
        }
        else
        {
            message = "Passwords are not the same";
            hiddenMessage = false;
        }
        NotifyChangedState();
    }
    public async void EditStudent()
    {
        await Authentication();
        if (editPasswordVM.NewPassword == editPasswordVM.ConfirmNewPassword)
        {
            var editPwDTO = _mapper.Map<EditPasswordDTO>(editPasswordVM);
            var response = await Client.PutAsJsonAsync("https://localhost:44397/api/student/UpdatePassword/" + user.Id, editPwDTO);
            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/Account");
            }
            else
            {
                message = "Old Password Incorrect";
                hiddenMessage = false;
            }
        }
        else
        {
            message = "Passwords are not the same";
            hiddenMessage = false;
        }
        NotifyChangedState();
    }

    //methods


    public void NotifyChangedState() => StateHasChanged();

    public void HideMessage()
    {
        hiddenMessage = true;
    }

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
