@page "/editlesson/{lessonId:int}"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

    <CascadingAuthenticationState>
        <div class="container-fluid p-5">
            <h1 class="display-3">Edit Lesson</h1>
            <hr class="my-4">
            <div class="container">
                <AuthorizeView Context="AuthorizeContext">
                    <Authorized>
                        @if (AuthorizeContext.User.IsInRole("Teacher"))
                        {
                        <EditForm Model="lessonModel" Context="EditformContext" OnValidSubmit="SubmitLesson">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div hidden="@hiddenMessage" class="alert alert-info col-md-12">@message <span @onclick="HideMessage">x</span></div>

                            <div class="col-md-12">
                                <label class="label">Instrument Name</label>
                                <InputSelect @bind-Value="lessonModel.InstrumentName">
                                    @foreach (var value in Enum.GetValues(typeof(InstrumentName)))
                                        {
                                        <option value="@value">@value</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="col-md-12">
                                <label class="label">Instrument Style</label>
                                <InputSelect @bind-Value="lessonModel.InstrumentStyle">
                                    @foreach (var value in Enum.GetValues(typeof(InstrumentStyle)))
                                        {
                                        <option value="@value">@value</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="col-md-12">
                                <label class="label">Lesson Level</label>
                                <InputSelect @bind-Value="lessonModel.LessonLevel">
                                    @foreach (var value in Enum.GetValues(typeof(LessonLevel)))
                                        {
                                        <option value="@value">@value</option>
                                        }
                                </InputSelect>
                            </div>
                            <div class="col-md-12">
                                <label class="label">Price</label>
                                <InputNumber @bind-Value="lessonModel.Price" @bind-Value:format="F2" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Date</label>
                                <InputDate  @bind-Value="date" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Start</label>
                                <input type="time" @bind-value="startTime" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Stop</label>
                                <input type="time"  @bind-value="stopTime" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Street</label>
                                <input type="text" placeholder="@lessonModel.Street" @bind-value="lessonModel.Street" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Number</label>
                                <input type="text" placeholder="@lessonModel.Number" @bind-value="lessonModel.Number" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Postal</label>
                                <input type="text" placeholder="@lessonModel.Postal" @bind-value="lessonModel.Postal" />
                            </div>
                            <div class="col-md-12">
                                <label class="label">Township</label>
                                <input type="text" placeholder="@lessonModel.Township" @bind-value="lessonModel.Township" />
                            </div>

                            <br />

                            <div class="col-12 d-flex justify-content-center">
                                <button disabled="@isBusy" class="btn-register" style="" type="submit">Edit</button>
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <button disabled="@isBusy" class="btn-register" style="" type="button" @onclick="CancelEdit">Cancel</button>
                            </div>
                        </EditForm>
                        }
                        else
                        {
                            <div class="container">
                                <div class="text-center">You are not authorized!</div>
                            </div>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <div class="container">
                            <div class="text-center">You are not authorized!</div>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <hr class="my-4">
        </div>
    </CascadingAuthenticationState>
   

    @code {
        EditLessonVM lessonModel = new EditLessonVM();
        ResponseLessonVM lessonPreview = new ResponseLessonVM();

        DateTime date;
        DateTime startTime;
        DateTime stopTime;

        string message = string.Empty;
        LocalAuthUser user;

        bool isBusy = false;

        bool hiddenMessage = true;

        [Parameter]
        public int lessonId { get; set; }



        protected override async Task OnInitializedAsync()
        {
            user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");
            if (user is null)
            {
                NavManager.NavigateTo("/Auth/Login");
            }
            await Authentication();
            var lessonDTO = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/GetOne/" + lessonId);
            lessonPreview = _mapper.Map<ResponseLessonVM>(lessonDTO);

            lessonModel.InstrumentName = lessonPreview.InstrumentName;
            lessonModel.InstrumentStyle = lessonPreview.InstrumentStyle;
            lessonModel.LessonLevel = lessonPreview.LessonLevel;
            lessonModel.Price = lessonPreview.Price;
            date = lessonPreview.Start.Date;
            startTime = lessonPreview.Start;
            stopTime = lessonPreview.Stop;
            lessonModel.Street = lessonPreview.Street;
            lessonModel.Number = lessonPreview.Number;
            lessonModel.Postal = lessonPreview.Postal;
            lessonModel.Township = lessonPreview.Township;
        }


        public async void SubmitLesson()
        {
            await Authentication();
            isBusy = true;
            lessonModel.Start = new DateTime( date.Year, date.Month, date.Day, startTime.Hour, startTime.Minute, 0);
            lessonModel.Stop = new DateTime( date.Year, date.Month, date.Day, stopTime.Hour, stopTime.Minute, 0);
            EditLessonDTO lessonDTO = _mapper.Map<EditLessonDTO>(lessonModel);

            var responseLesson = await Client.PutAsJsonAsync("https://localhost:44397/api/lesson/UpdateLesson/" + lessonId, lessonDTO);
            if (responseLesson.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/account");
            }
            else
            {
                message = "Something went wrong while editing your lesson.";
                hiddenMessage = false;
            }


            isBusy = false;
            NotifyChangedState();
        }

        public void CancelEdit()
        {
            NavManager.NavigateTo($"/lessondetails/{lessonId}");
        }







        //methods



        private void NotifyChangedState() => StateHasChanged();

        public void HideMessage() { hiddenMessage = true; }

        public async Task Authentication()
        {
            var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
            var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
            if (sessionExpired is true)
            {
                NavManager.NavigateTo("/auth/login");
            }
        }

        protected override void OnAfterRender(bool firstRender)
        {
            var navUri = NavManager.Uri;
            if (firstRender)
            {
                var timer = new Timer(new TimerCallback(_ =>
                {
                    if (navUri == NavManager.Uri)
                    {
                        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                    }

                }), null, 600000, 600000);
            }
        }
    }
