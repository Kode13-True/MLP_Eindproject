@page "/editlesson/{lessonId:int}"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

    <CascadingAuthenticationState>
        <div class="container-fluid p-5">
            <h1 class="display-3">Edit Lesson</h1>
            <hr class="my-4">
            <div class="container">
                <AuthorizeView Context="AuthorizeContext">
                    <Authorized>
                        @if (AuthorizeContext.User.IsInRole("Teacher"))
                        {
                            <EditForm Model="lessonModel" Context="EditformContext" OnValidSubmit="SubmitLesson">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-4">
                                        <div><ValidationSummary /></div>
                                    </div>
                                    <div class="col-md-4"></div>
                                </div>

                                <div hidden="@hiddenMessage" class="alert alert-info col-md-12">@message <span @onclick="HideMessage" class="float-end" style="cursor:pointer">x</span></div>

                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="instrument">Instrument</label>
                                    <div class="col-md-2">
                                        <InputSelect @bind-Value="lessonModel.InstrumentName" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                            <option></option>
                                            @foreach (var value in Enum.GetValues(typeof(InstrumentName)))
                                                {
                                                <option>@value</option>
                                                }
                                        </InputSelect>
                                    </div>
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="style">Style</label>
                                    <div class="col-md-2">
                                        <InputSelect @bind-Value="lessonModel.InstrumentStyle" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                            <option></option>
                                            @foreach (var value in Enum.GetValues(typeof(InstrumentStyle)))
                                                {
                                                <option>@value</option>
                                                }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="level">Level</label>
                                    <div class="col-md-2">
                                        <InputSelect @bind-Value="lessonModel.LessonLevel" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                            <option></option>
                                            @foreach (var value in Enum.GetValues(typeof(LessonLevel)))
                                                {
                                                <option>@value</option>
                                                }
                                        </InputSelect>
                                    </div>
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="price">Price</label>
                                    <div class="col-md-2">
                                        <InputNumber class="form form-control" @bind-Value:format="F2" @bind-Value="lessonModel.Price" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px;focus:invisible; border-width:thin")" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="date">Date</label>
                                    <div class="col-md-2">
                                        <InputDate class="form form-control" @bind-Value="date" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" />
                                    </div>
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="start">Start</label>
                                    <div class="col-md-2">
                                        <input class="form form-control" type="time" @bind-value="startTime" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-7"></div>
                                    <label class="col-md-1 form-label" for="stop">Stop</label>
                                    <div class="col-md-2">
                                        <input class="form form-control" type="time" @bind-value="stopTime" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="street">Street</label>
                                    <div class="col-md-7">
                                        <input class="form form-control" type="text" placeholder="Street" @bind-value="lessonModel.Street" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="number">Number</label>
                                    <div class="col-md-7">
                                        <input class="form form-control" type="text" placeholder="Number" @bind-value="lessonModel.Number" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="postal">Postal</label>
                                    <div class="col-md-7">
                                        <input class="form form-control" type="text" placeholder="Postal Code" @bind-value="lessonModel.Postal" />
                                    </div>
                                </div>
                                <div class="row mb-1">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-1 form-label" for="township">Township</label>
                                    <div class="col-md-7">
                                        <input class="form form-control" type="text" placeholder="Township" @bind-value="lessonModel.Township" />
                                    </div>
                                </div>

                                <div class="row pt-1">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-8">
                                        <button onclick="window.history.back()" class="btn btn-primary w-25 m-1  float-end" type="button">Back</button>
                                        <button disabled="@isBusy" class="btn btn-succes w-25 m-1  float-end" style="" type="submit">Save</button>
                                    </div>
                                </div>

                            </EditForm>
                        }
                        @if (AuthorizeContext.User.IsInRole("Admin"))
                        {
                            <EditForm Model="lessonModel" Context="EditformContext" OnValidSubmit="SubmitLesson">
                                <DataAnnotationsValidator />
                                    <div class="row">
                                        <div class="col-md-4"></div>
                                        <div class="col-md-4">
                                            <div><ValidationSummary /></div>
                                        </div>
                                        <div class="col-md-4"></div>
                                    </div>

                                    <div hidden="@hiddenMessage" class="alert alert-info col-md-12">@message <span @onclick="HideMessage" class="float-end" style="cursor:pointer">x</span></div>

                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="instrument">Instrument</label>
                                        <div class="col-md-2">
                                            <InputSelect @bind-Value="lessonModel.InstrumentName" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                                <option></option>
                                                @foreach (var value in Enum.GetValues(typeof(InstrumentName)))
                                                    {
                                                    <option>@value</option>
                                                    }
                                            </InputSelect>
                                        </div>
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="style">Style</label>
                                        <div class="col-md-2">
                                            <InputSelect @bind-Value="lessonModel.InstrumentStyle" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                                <option></option>
                                                @foreach (var value in Enum.GetValues(typeof(InstrumentStyle)))
                                                    {
                                                    <option>@value</option>
                                                    }
                                            </InputSelect>
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="level">Level</label>
                                        <div class="col-md-2">
                                            <InputSelect @bind-Value="lessonModel.LessonLevel" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                                <option></option>
                                                @foreach (var value in Enum.GetValues(typeof(LessonLevel)))
                                                    {
                                                    <option>@value</option>
                                                    }
                                            </InputSelect>
                                        </div>
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="price">Price</label>
                                        <div class="col-md-2">
                                            <InputNumber class="form form-control" @bind-Value:format="F2" @bind-Value="lessonModel.Price" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px;focus:invisible; border-width:thin")" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="date">Date</label>
                                        <div class="col-md-2">
                                            <InputDate class="form form-control" @bind-Value="date" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" />
                                        </div>
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="start">Start</label>
                                        <div class="col-md-2">
                                            <input class="form form-control" type="time" @bind-value="startTime" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px; border-width:thin")" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-7"></div>
                                        <label class="col-md-1 form-label" for="stop">Stop</label>
                                        <div class="col-md-2">
                                            <input class="form form-control" type="time" @bind-value="stopTime" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="street">Street</label>
                                        <div class="col-md-7">
                                            <input class="form form-control" type="text" placeholder="Street" @bind-value="lessonModel.Street" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="number">Number</label>
                                        <div class="col-md-7">
                                            <input class="form form-control" type="text" placeholder="Number" @bind-value="lessonModel.Number" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="postal">Postal</label>
                                        <div class="col-md-7">
                                            <input class="form form-control" type="text" placeholder="Postal Code" @bind-value="lessonModel.Postal" />
                                        </div>
                                    </div>
                                    <div class="row mb-1">
                                        <div class="col-md-2"></div>
                                        <label class="col-md-1 form-label" for="township">Township</label>
                                        <div class="col-md-7">
                                            <input class="form form-control" type="text" placeholder="Township" @bind-value="lessonModel.Township" />
                                        </div>
                                    </div>

                                    <div class="row pt-1">
                                        <div class="col-md-2"></div>
                                        <div class="col-md-8">
                                            <button onclick="window.history.back()" class="btn btn-primary w-25 m-1  float-end" type="button">Back</button>
                                            <button disabled="@isBusy" class="btn btn-succes w-25 m-1  float-end" style="" type="submit">Save</button>
                                        </div>
                                    </div>

                            </EditForm>
                        }
                        @if (AuthorizeContext.User.IsInRole("Student"))
                        {
                            <div class="container">
                                <div class="text-center">You are not authorized!</div>
                            </div>
                        }
                    </Authorized>
                    <NotAuthorized>
                        <div class="container">
                            <div class="text-center">You are not authorized!</div>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <hr class="my-4">
        </div>
    </CascadingAuthenticationState>
   

    @code {
        EditLessonVM lessonModel = new EditLessonVM();
        ResponseLessonVM lessonPreview = new ResponseLessonVM();

        DateTime date;
        DateTime startTime;
        DateTime stopTime;

        string message = string.Empty;
        LocalAuthUser user;

        bool isBusy = false;

        bool hiddenMessage = true;

        [Parameter]
        public int lessonId { get; set; }



        protected override async Task OnInitializedAsync()
        {
            user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");
            if (user is null)
            {
                NavManager.NavigateTo("/Auth/Login");
            }
            await Authentication();
            var lessonDTO = await Client.GetFromJsonAsync<ResponseLessonDTO>("https://localhost:44397/api/lesson/GetOne/" + lessonId);
            lessonPreview = _mapper.Map<ResponseLessonVM>(lessonDTO);

            lessonModel.InstrumentName = lessonPreview.InstrumentName;
            lessonModel.InstrumentStyle = lessonPreview.InstrumentStyle;
            lessonModel.LessonLevel = lessonPreview.LessonLevel;
            lessonModel.Price = lessonPreview.Price;
            date = lessonPreview.Start.Date;
            startTime = lessonPreview.Start;
            stopTime = lessonPreview.Stop;
            lessonModel.Street = lessonPreview.Street;
            lessonModel.Number = lessonPreview.Number;
            lessonModel.Postal = lessonPreview.Postal;
            lessonModel.Township = lessonPreview.Township;
        }


        public async void SubmitLesson()
        {
            await Authentication();
            isBusy = true;
            lessonModel.Start = new DateTime( date.Year, date.Month, date.Day, startTime.Hour, startTime.Minute, 0);
            lessonModel.Stop = new DateTime( date.Year, date.Month, date.Day, stopTime.Hour, stopTime.Minute, 0);
            if (lessonModel.Start > DateTime.Now)
            {
                if (lessonModel.Stop > lessonModel.Start)
                {
                    EditLessonDTO lessonDTO = _mapper.Map<EditLessonDTO>(lessonModel);

                    var responseLesson = await Client.PutAsJsonAsync("https://localhost:44397/api/lesson/UpdateLesson/" + lessonId, lessonDTO);
                    if (responseLesson.IsSuccessStatusCode)
                    {
                        NavManager.NavigateTo("/account");
                    }
                    else
                    {
                        message = "Something went wrong while editing your lesson.";
                        hiddenMessage = false;
                    }
                }
                else
                {
                    message = "End of lesson should be after the beginning!";
                    hiddenMessage = false;
                }
            }
            else
            {
                message = "Incorrect Date!";
                hiddenMessage = false;
            }


            isBusy = false;
            NotifyChangedState();
        }

        public void CancelEdit()
        {
            NavManager.NavigateTo($"/lessondetails/{lessonId}");
        }







        //methods



        private void NotifyChangedState() => StateHasChanged();

        public void HideMessage() { hiddenMessage = true; }

        public async Task Authentication()
        {
            var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
            var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
            if (sessionExpired is true)
            {
                NavManager.NavigateTo("/auth/login");
            }
        }

        protected override void OnAfterRender(bool firstRender)
        {
            var navUri = NavManager.Uri;
            if (firstRender)
            {
                var timer = new Timer(new TimerCallback(_ =>
                {
                    if (navUri == NavManager.Uri)
                    {
                        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                    }

                }), null, 600000, 600000);
            }
        }
    }
