@page "/deleteUser/{AlertId:int}"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager


<CascadingAuthenticationState>
    <div class="container-fluid p-5 vh-100">
        <h1 class="display-3">Mubster Liquidation</h1>
        <hr class="my-4">
        <form class="container pb-0">
            <AuthorizeView Context="AuthorizeContext">
                <Authorized>
                    @if (AuthorizeContext.User.IsInRole("Admin"))
                    {
                        @if (alert is not null)
                        {
                            <div class="card-columns">
                                <div class="row">
                                   <div class="card d-inline-block m-auto" style="width: 36rem;">

                                       <div class="card-body align-content-center">
                                           <div hidden="@hiddenMessage" class="alert alert-info text-center">@message <span class="float-end" @onclick="HideMessage" style="cursor:pointer">x</span></div>
                                           <div id="AreYouSureMessage" hidden="@hiddenDeleteMessage" class="alert alert-danger col-md-12 text-center">
                                               Are you sure? <span @onclick="ProceedDelete" style="cursor:pointer"> [yes] </span> / <span @onclick="NoDelete" style="cursor:pointer"> [no] </span>
                                           </div>
                                           <p class="card-text over">@alert.Message</p>
                                           <EditForm Model="deleteUserDTO" OnValidSubmit="CertainDeleteUser">
                                               <label class="form-label text-info">Person Type</label>
                                               <InputSelect @bind-Value="deleteUserDTO.PersonType" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px")" CollapsedButtonIcon="C1IconTemplate.ChevronDown">
                                                   @foreach (var value in Enum.GetValues(typeof(PersonType)))
                                                           {
                                                       <option value="@value">@value</option>
                                                           }
                                               </InputSelect>
                                               <label class="form-label  text-info">User Id</label>
                                               <input type="number" @bind-value="deleteUserDTO.Id" Style="@("margin:8px 0;background-color:#E1E7F4;width:100%;border-radius:5px;padding:7px 12px;focus:invisible; border-width:thin")" />

                                               <div class=" card-footer text-center">
                                                   <button class="btn btn-info w-25 text-center m-3" type="button" @onclick="CancelDelete">cancel</button>
                                                   <button class="btn btn-danger w-25 text-center m-3" type="submit">delete</button>
                                               </div>
                                           </EditForm>  
                                       </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <h6>You are not authorized!</h6>
                        }
                    }
                    else
                    {
                        <h6>You are not authorized!</h6>
                    }
                </Authorized>
                <NotAuthorized>
                    <h6>You are not authorized!</h6>
                </NotAuthorized>
            </AuthorizeView>
        </form>
    </div>
</CascadingAuthenticationState>

@code {
    DeleteUserDTO deleteUserDTO = new DeleteUserDTO();

    string message = string.Empty;
    bool hiddenMessage = true;
    bool hiddenDeleteMessage = true;

    LocalAuthUser User;

    [Parameter]
    public int AlertId { get; set; }

    ResponseAlertDTO alert;


    protected override async Task OnInitializedAsync()
    {
        await Authentication();

        User = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        if (User is not null)
        {
            if (User.Role is not PersonType.Admin)
            {
                NavManager.NavigateTo("/auth/login");
            }
        }
        else
        {
            NavManager.NavigateTo("/auth/login");
        }

        alert = await Client.GetFromJsonAsync<ResponseAlertDTO>("https://localhost:44397/api/alert/one/" + AlertId);
    }


    public async void ProceedDelete()
    {
        await Authentication();
        if(deleteUserDTO.Id != 1)
        {
            if(deleteUserDTO.PersonType == PersonType.Admin)
            {
                if(User.Id == 1)
                {
                    var deleteResponse = await Client.PutAsJsonAsync("https://localhost:44397/api/admin/DeleteUser", deleteUserDTO);
                    if (deleteResponse.IsSuccessStatusCode)
                    {
                        NavManager.NavigateTo("/account");
                    }
                    else
                    {
                        message = "Delete failed";
                        hiddenMessage = false;
                    }
                }
                else
                {
                    message = "You are not authorized for this delete";
                    hiddenMessage = false;
                }
            }
            else
            {
                var deleteResponse = await Client.PutAsJsonAsync("https://localhost:44397/api/admin/DeleteUser", deleteUserDTO);
                if (deleteResponse.IsSuccessStatusCode)
                {
                    NavManager.NavigateTo("/account");
                }
                else
                {
                    message = "Delete failed";
                    hiddenMessage = false;
                }
            }
        }
        else
        {
            message = "admin@mub cannot be deleted.";
            hiddenMessage = false;
        }

        NotifyChangedState();
    }

    public async void CertainDeleteUser()
    {
        await Authentication();

        hiddenDeleteMessage = false;
        NotifyChangedState();
    }
    public void NoDelete()
    {
        hiddenDeleteMessage = true;
    }
    public void CancelDelete()
    {
        NavManager.NavigateTo("/Account");
    }


    //methods
    private void NotifyChangedState() => StateHasChanged();
    public void HideMessage() { hiddenMessage = true; }

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }


}
