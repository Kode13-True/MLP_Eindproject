@page "/students"

@inject HttpClient Client
@inject IMapper _mapper
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
<CascadingAuthenticationState>
    <div class="container">
        <AuthorizeView>
            <Authorized>
                @if (context.User.IsInRole("Teacher"))
                {
                    <div class="container-fluid p-5">
                        <h1 class="display-3">Students Overview</h1>
                        <hr class="my-4">
                    </div>
                    @if (students == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        @foreach (var student in students)
                        {

                            <div class="card d-inline-block m-2" style="width: 18rem;">
                                <div class="card-body align-content-center">
                                    <h5 class="card-title text-center">@student.FirstName @student.LastName</h5>
                                    <a href="report/@student.Id" class="btn btn-danger w-100">Report Student</a>
                                </div>
                            </div>
                        }
                    }
                }
                @if (context.User.IsInRole("Admin"))
                {
                    <div class="container-fluid p-5">
                        <h1 class="display-3">Students Overview</h1>
                        <hr class="my-4">
                    </div>
                    @if (students == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        @foreach (var student in students)
                        {

                            <div class="card d-inline-block m-2" style="width: 18rem;">
                                <div class="card-body align-content-center">
                                    <h5 class="card-title text-center">@student.FirstName @student.LastName</h5>
                                    <a href="report/@student.Id" class="btn btn-danger w-100">Report Student</a>
                                </div>
                            </div>
                        }
                    }
                }
                @if (context.User.IsInRole("Student"))
                {
                    <div class="container-fluid p-5">
                        <h1 class="display-3">You are not authorized!</h1>
                        <hr class="my-4">
                    </div>
                }

            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>
    </div>
</CascadingAuthenticationState>


@code {
    List<ResponseStudentVM> students;

    protected override async Task OnInitializedAsync()
    {
        await Authentication();
        var studentDTOs = await Client.GetFromJsonAsync<List<ResponseStudentDTO>>("https://localhost:44397/api/Student/GetAll");
        students = _mapper.Map<List<ResponseStudentVM>>(studentDTOs);
    }


    //method
    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
