@page "/Account"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<CascadingAuthenticationState>
    <div class="container-fluid p-5">
        <h1 class="display-3">Mubster Account</h1>
        <hr class="my-4">
        <div id="errorMessage" hidden="@hiddenMessage" class="alert alert-danger col-md-12 text-center">@message <span @onclick="HideMessage" class="float-end" style="cursor:pointer">x</span></div>

        <AuthorizeView>
            <Authorized>
                @if (@context.User.IsInRole("Admin"))
                {
                    <div class="card-columns">
                        <div class="row">
                            @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                    <img src="/images/users.png" class="card-img-top" alt="...">
                                </div>*@
                            <div class="card d-inline-block m-auto" style="width: 36rem;">

                                <div class="card-body align-content-center">
                                    <h1 class="card-title text-center">@admin.FirstName @admin.LastName</h1>
                                    <h6 class="card-title text-center">Mubster admin since: @admin.DOC.ToShortDateString()</h6>
                                    <p class="card-text mx-1">Mail: <div class="float-end">@admin.Email</div></p>
                                    <a href="AccountEdit" class="btn btn-warning w-100 m-1">Edit Account</a>
                                    <a href="AccountDelete" class="btn btn-danger w-100 m-1">Delete Account</a>
                                </div>
                            </div>
                        </div>
                    </div>


                }
                else if (@context.User.IsInRole("Teacher"))
                {
                    @foreach (var alert in alerts)
                    {
                        <div class="alert alert-danger text-center">@alert.AlertType.ToString(): @alert.Message <span class="float-end" style="cursor: pointer" @onclick="() => DeleteAlert(alert.Id)">x</span> </div>
                    }
                    <div class="row">
                        <div class="col-md-10"></div>
                        <div class="col-md-2"><button class="btn btn-danger w-100 m-1" @onclick="DeleteAllAlerts" hidden="@hiddenDeleteAlertsButton">Delete All</button></div>
                    </div>
                    <hr class="my-4" hidden="@hiddenAlertLine" />

                    <div class="card-columns">
                        <div class="row">
                            @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                    <img src="/images/users.png" class="card-img-top" alt="...">
                                </div>*@
                            <div class="card d-inline-block m-auto" style="width: 36rem;">

                                <div class="card-body align-content-center">
                                    <h1 class="card-title text-center">@teacher.FirstName @teacher.LastName</h1>
                                    <h6 class="card-title text-center">Mubster teacher since: @teacher.DOC.ToShortDateString()</h6>
                                    <p class="card-text mx-1">Mail: <div class="float-end">@teacher.Email</div></p>
                                    <p class="card-text text-succes overflow-hidden" style="height: 10vh; max-height:10vh;">@teacher.Description</p>
                                    <p class="card-footer">Rating = <div class="float-end">@teacher.Rating</div></p>
                                    <a href="AccountEdit" class="btn btn-warning w-100 m-1">Edit Account</a>
                                    <a href="AccountDelete" class="btn btn-danger w-100 m-1">Delete Account</a>
                                </div>
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    @foreach (var alert in alerts)
                    {
                        <div class="alert alert-danger text-center">@alert.AlertType.ToString(): @alert.Message <span class="float-end" style="cursor: pointer" @onclick="() => DeleteAlert(alert.Id)">x</span> </div>
                    }
                    <div class="row">
                        <div class="col-md-10"></div>
                        <div class="col-md-2"><button class="btn btn-danger w-100 m-1" @onclick="DeleteAllAlerts" hidden="@hiddenDeleteAlertsButton">Delete All</button></div>
                    </div>
                    <hr class="my-4" hidden="@hiddenAlertLine" />
                    <div class="container align-content-center p-md-5">
                        <div class="card-columns">
                            <div class="row">
                                @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                        <img src="/images/users.png" class="card-img-top" alt="...">
                                    </div>*@
                                <div class="card d-inline-block m-auto" style="width: 36rem;">

                                    <div class="card-body align-content-center">
                                        <h1 class="card-title text-center">@student.FirstName @student.LastName</h1>
                                        <h6 class="card-title text-center">Mubster student since: @student.DOC.ToShortDateString()</h6>
                                        <p class="card-text mx-1">Mail: <div class="float-end">@student.Email</div></p>


                                        <a href="AccountEdit" class="btn btn-warning w-100 m-1">Edit Account</a>
                                        <a href="AccountDelete" class="btn btn-danger w-100 m-1">Delete Account</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                }

            </Authorized>
            <NotAuthorized>
                <div class="container">
                    <div class="text-center"> login please !</div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        <hr class="my-4">
        <AuthorizeView>
            <Authorized>
                @if (@context.User.IsInRole("Admin"))
                {

                    <div class="container">
                        <table class="table table-succes table-striped table-hover mx-4" style="width: 75rem;">
                            <thead>
                                <tr>
                                    <th><div class="d-block">Reports</div></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var alert in alerts)
                                {
                                    <tr @onclick="() => GoDeleteUser(alert.Id)">
                                        <td><div class="d-block">@alert.Message</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <hr class="my-4">

                    <AdminStats />

                }
                else if (@context.User.IsInRole("Teacher"))
                {
                    <table class="table table-striped table-hover m-auto">
                        <thead>
                            <tr>
                                <th><div class="d-block">Instrument</div></th>
                                <th><div class="d-block">Style</div></th>
                                <th><div class="d-none d-md-block">Level</div></th>
                                <th><div class="d-block">Location</div></th>
                                <th><div class="d-none d-md-block">Date</div></th>
                                <th><div class="d-none d-md-block">Start</div></th>
                                <th><div class="d-none d-md-block">End</div></th>
                                <th><div class="d-none d-md-block">Student</div></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Upcoming Lessons</td></tr>
                            @foreach (var lesson in teacherFutureLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.StudentFirstName @lesson.StudentLastName</div></td>
                                </tr>
                            }
                        </tbody>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Expired Lessons</td></tr>
                            @foreach (var lesson in teacherPastLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.StudentFirstName @lesson.StudentLastName</div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <table class="table table-striped table-hover m-auto">
                        <thead>
                            <tr>
                                <th><div class="d-block">Instrument</div></th>
                                <th><div class="d-block">Style</div></th>
                                <th><div class="d-none d-md-block">Level</div></th>
                                <th><div class="d-block">Location</div></th>
                                <th><div class="d-none d-md-block">Date</div></th>
                                <th><div class="d-none d-md-block">Start</div></th>
                                <th><div class="d-none d-md-block">End</div></th>
                                <th><div class="d-none d-md-block">Teacher</div></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Upcoming Lessons</td></tr>
                            @foreach (var lesson in studentFutureLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.TeacherFirstName @lesson.TeacherLastName</div></td>
                                </tr>
                            }
                        </tbody>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Expired Lessons</td></tr>
                            @foreach (var lesson in studentPastLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.TeacherFirstName @lesson.TeacherLastName</div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </Authorized>
            <NotAuthorized>

            </NotAuthorized>
        </AuthorizeView>

    </div>
</CascadingAuthenticationState>



@code {

    public ResponseTeacherVM teacher = new ResponseTeacherVM();
    public List<ResponseLessonVM> teacherFutureLessons = new List<ResponseLessonVM>();
    public List<ResponseLessonVM> teacherPastLessons = new List<ResponseLessonVM>();
    public ResponseStudentVM student = new ResponseStudentVM();
    public List<ResponseLessonVM> studentFutureLessons = new List<ResponseLessonVM>();
    public List<ResponseLessonVM> studentPastLessons = new List<ResponseLessonVM>();
    public ResponseAdminVM admin = new ResponseAdminVM();

    List<ResponseAlertVM> alerts = new List<ResponseAlertVM>();

    LocalAuthUser user;

    [Parameter]
    public int personId { get; set; }

    string message = string.Empty;
    bool hiddenMessage = true;
    bool hiddenAlertLine = true;
    bool hiddenDeleteAlertsButton = true;


    protected override async Task OnInitializedAsync()
    {
        user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        if (user is not null)
        {
            await Authentication();

            var persontype = user.Role.ToString();
            var personId = user.Id;

            if (user.Role is PersonType.Admin)
            {
                var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetReportsByAdmin");
                if (alertsResponse.Count != 0)
                {
                    alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                }
            }
            else
            {
                var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + personId);
                if (alertsResponse.Count != 0)
                {
                    alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                    hiddenAlertLine = false;
                    hiddenDeleteAlertsButton = false;
                }
            }


            if (persontype == "Admin")
            {
                var adminDTO = await Client.GetFromJsonAsync<ResponseAdminDTO>("https://localhost:44397/api/Admin/One/" + personId);

                admin = _mapper.Map<ResponseAdminVM>(adminDTO);
            }
            else if (persontype == "Teacher")
            {
                var teacherDTO = await Client.GetFromJsonAsync<ResponseTeacherDTO>("https://localhost:44397/api/Teacher/One/" + personId);
                var lessonsDTO = await Client.GetFromJsonAsync<List<ResponseLessonDTO>>("https://localhost:44397/api/Lesson/GetAllTeacherLessons/" + personId);

                teacher = _mapper.Map<ResponseTeacherVM>(teacherDTO);
                if (teacher.Rating == "0")
                {
                    teacher.Rating = "N/A";
                }
                var teacherLessons = _mapper.Map<List<ResponseLessonVM>>(lessonsDTO);
                foreach (var lesson in teacherLessons)
                {
                    if (lesson.Stop > DateTime.Now)
                    {
                        teacherFutureLessons.Add(lesson);
                    }
                    if (lesson.Stop < DateTime.Now)
                    {
                        teacherPastLessons.Add(lesson);
                    }
                }
                teacherPastLessons = teacherPastLessons.OrderByDescending(x => x.Stop).ToList();

            }
            else
            {
                var studentDTO = await Client.GetFromJsonAsync<ResponseStudentDTO>("https://localhost:44397/api/Student/One/" + personId);
                var lessonsDTO = await Client.GetFromJsonAsync<List<ResponseLessonDTO>>("https://localhost:44397/api/Lesson/GetAllStudentLessons/" + personId);

                student = _mapper.Map<ResponseStudentVM>(studentDTO);
                var studentLessons = _mapper.Map<List<ResponseLessonVM>>(lessonsDTO);
                foreach (var lesson in studentLessons)
                {
                    if (lesson.Stop > DateTime.Now)
                    {
                        studentFutureLessons.Add(lesson);
                    }
                    if (lesson.Stop < DateTime.Now)
                    {
                        studentPastLessons.Add(lesson);
                    }
                    studentPastLessons = studentPastLessons.OrderByDescending(x => x.Stop).ToList();
                }
            }

        }
        NotifyChangedState();
    }

    public void GoDeleteUser(int id)
    {
        NavManager.NavigateTo($"/DeleteUser/{id}");
    }

    public void LessonDetails(int id)
    {

        NavManager.NavigateTo($"/lessondetails/{id}");
    }

    public async void DeleteAlert(int id)
    {
        await Authentication();
        alerts.Clear();
        var response = await Client.DeleteAsync("https://localhost:44397/api/alert/delete/" + id);
        if (response.IsSuccessStatusCode)
        {
            var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + user.Id);
            if (alertsResponse.Count != 0)
            {
                alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                hiddenAlertLine = false;
                NavManager.NavigateTo("/Account", true);
            }
            else
            {
                hiddenAlertLine = true;
                NavManager.NavigateTo("/Account", true);
            }
        }
        else
        {
            message = "Alerts failed to delete, please try again some other time";
            hiddenMessage = false;
        }

        NotifyChangedState();
    }
    public async void DeleteAllAlerts()
    {
        await Authentication();
        alerts.Clear();
        var responseDelete = await Client.DeleteAsync("https://localhost:44397/api/alert/DeleteAll/" + user.Id);
        if (responseDelete.IsSuccessStatusCode)
        {
            var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + user.Id);
            if (alertsResponse.Count != 0)
            {
                alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                hiddenAlertLine = false;
                hiddenDeleteAlertsButton = false;
                NavManager.NavigateTo("/Account", true);
            }
            else
            {
                hiddenDeleteAlertsButton = true;
                hiddenAlertLine = true;
                NavManager.NavigateTo("/Account", true);
            }
        }
        else
        {
            message = "Alerts failed to delete, please try again some other time";
            hiddenMessage = false;
        }
        NotifyChangedState();
    }

    //methods

    private void NotifyChangedState() => StateHasChanged();

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
    public void HideMessage()
    {
        hiddenMessage = true;
    }
}
