@page "/Account"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

    <CascadingAuthenticationState>
        <div class="container-fluid p-5">
            <h1 class="display-3">Mubster Account</h1>
            <hr class="my-4">

           
                <AuthorizeView>
                    <Authorized>
                        @if (@context.User.IsInRole("Admin"))
                        {
                            <div class="container pb-3">
                                Mubster Name : @admin.FirstName @admin.LastName<br />
                                Mubster Email : @admin.Email<br />
                                Mubster Since : @admin.DOC.ToShortDateString()<br />
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <a href="AccountEdit" class="btn btn-warning w-25">Edit</a>
                                <a href="AccountDelete" class="btn btn-danger w-25">Delete</a>
                            </div>

                        }
                        else if (@context.User.IsInRole("Teacher"))
                        {
                            @foreach (var alert in alerts)
                            {
                                <div class="alert alert-danger text-center">@alert.AlertType.ToString(): @alert.Message <span class="float-end" style="cursor: pointer" @onclick="() => DeleteAlert(alert.Id)">x</span> </div>
                            }
                            <hr class="my-4" hidden="@hiddenAlertLine" />
                            <div class="container pb-3">
                                Mubster Name : @teacher.FirstName @teacher.LastName<br />
                                Mubster Email : @teacher.Email<br />
                                Mubster Since : @teacher.DOC.ToShortDateString()<br />
                                Mubster Rating : @teacher.Rating / 5<br />
                                Mubster Description : @teacher.Description<br />
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <a href="AccountEdit" class="btn btn-warning w-25">Edit</a>
                                <a href="AccountDelete" class="btn btn-danger w-25">Delete</a>
                            </div>
                        }
                        else
                        {
                            @foreach (var alert in alerts)
                            {
                                <div class="alert alert-danger text-center">@alert.AlertType.ToString(): @alert.Message <span class="float-end" style="cursor: pointer" @onclick="() => DeleteAlert(alert.Id)">x</span> </div>
                            }
                            <hr class="my-4" hidden="@hiddenAlertLine" />
                            <div class="container pb-3">
                                Mubster Name : @student.FirstName @student.LastName<br />
                                Mubster Email : @student.Email<br />
                                Mubster Since : @student.DOC.ToShortDateString()<br />
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <a href="AccountEdit" class="btn btn-warning w-25">Edit</a>
                                <a href="AccountDelete" class="btn btn-danger w-25">Delete</a>
                            </div>
                        }

                    </Authorized>
                    <NotAuthorized>
                        <div class="container">
                            <div class="text-center"> login please !</div>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
                <hr class="my-4">
                <AuthorizeView>
                    <Authorized>
                        @if (@context.User.IsInRole("Admin"))
                        {
                            <table class="table table-striped table-hover m-auto">
                                <thead>
                                    <tr>
                                        <th><div class="d-block">Reports</div></th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var alerts in alerts)
                                    {
                                        <tr>
                                            <td><div class="d-block">@alerts.Message</div></td>
                                        </tr>
                                    }
                                        
                                </tbody>
                            </table>
                        }
                        else if (@context.User.IsInRole("Teacher"))
                        {
                        <table class="table table-striped table-hover m-auto">
                            <thead>
                                <tr>
                                    <th><div class="d-block">Instrument</div></th>
                                    <th><div class="d-block">Style</div></th>
                                    <th><div class="d-none d-md-block">Level</div></th>
                                    <th><div class="d-block">Location</div></th>
                                    <th><div class="d-none d-md-block">Date</div></th>
                                    <th><div class="d-none d-md-block">Start</div></th>
                                    <th><div class="d-none d-md-block">End</div></th>
                                    <th><div class="d-none d-md-block">Student</div></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr ><td colspan="8" style="cursor:default">Upcoming Lessons</td></tr>
                                @foreach (var lesson in teacherFutureLessons)
                                {
                                    <tr @onclick="() => LessonDetails(lesson.Id)">
                                        <td><div class="d-block">@lesson.InstrumentName</div></td>
                                        <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                        <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                        <td><div class="d-block">@lesson.Township</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.StudentFirstName @lesson.StudentLastName</div></td>
                                    </tr>
                                }
                            </tbody>                            
                            <tbody>
                                <tr><td colspan="8" style="cursor:default">Expired Lessons</td></tr>
                                @foreach (var lesson in teacherPastLessons)
                                {
                                    <tr @onclick="() => LessonDetails(lesson.Id)">
                                        <td><div class="d-block">@lesson.InstrumentName</div></td>
                                        <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                        <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                        <td><div class="d-block">@lesson.Township</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                        <td><div class="d-none d-md-block">@lesson.StudentFirstName @lesson.StudentLastName</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        }
                        else
                        {
                    <table class="table table-striped table-hover m-auto">
                        <thead>
                            <tr>
                                <th><div class="d-block">Instrument</div></th>
                                <th><div class="d-block">Style</div></th>
                                <th><div class="d-none d-md-block">Level</div></th>
                                <th><div class="d-block">Location</div></th>
                                <th><div class="d-none d-md-block">Date</div></th>
                                <th><div class="d-none d-md-block">Start</div></th>
                                <th><div class="d-none d-md-block">End</div></th>
                                <th><div class="d-none d-md-block">Teacher</div></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Upcoming Lessons</td></tr>
                            @foreach (var lesson in studentFutureLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.TeacherFirstName @lesson.TeacherLastName</div></td>
                                </tr>
                            }
                        </tbody>
                        <tbody>
                            <tr><td colspan="8" style="cursor:default">Expired Lessons</td></tr>
                            @foreach (var lesson in studentPastLessons)
                            {
                                <tr @onclick="() => LessonDetails(lesson.Id)">
                                    <td><div class="d-block">@lesson.InstrumentName</div></td>
                                    <td><div class="d-block">@lesson.InstrumentStyle</div></td>
                                    <td><div class="d-none d-md-block">@lesson.LessonLevel</div></td>
                                    <td><div class="d-block">@lesson.Township</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortDateString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Start.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.Stop.ToShortTimeString()</div></td>
                                    <td><div class="d-none d-md-block">@lesson.TeacherFirstName @lesson.TeacherLastName</div></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                        }
                    </Authorized>
                    <NotAuthorized>

                    </NotAuthorized>
                </AuthorizeView>

            </div>
    </CascadingAuthenticationState>



@code {

    public ResponseTeacherVM teacher = new ResponseTeacherVM();
    public List<ResponseLessonVM> teacherFutureLessons = new List<ResponseLessonVM>();
    public List<ResponseLessonVM> teacherPastLessons = new List<ResponseLessonVM>();
    public ResponseStudentVM student = new ResponseStudentVM();
    public List<ResponseLessonVM> studentFutureLessons = new List<ResponseLessonVM>();
    public List<ResponseLessonVM> studentPastLessons = new List<ResponseLessonVM>();
    public ResponseAdminVM admin = new ResponseAdminVM();

    List<ResponseAlertVM> alerts = new List<ResponseAlertVM>();

    LocalAuthUser user;

    [Parameter]
    public int personId { get; set; }

    bool hiddenAlertLine = true;

    protected override async Task OnInitializedAsync()
    {
        user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        await Authentication();

        if (user is not null)
        {


            var persontype = user.Role.ToString();
            var personId = user.Id;

            if(user.Role is PersonType.Admin)
            {
                var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetReportsByAdmin");
                if (alertsResponse.Count != 0)
                {
                    alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                }
            }
            else
            {
                var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + personId);
                if (alertsResponse.Count != 0)
                {
                    alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                    hiddenAlertLine = false;
                }
            }


            if (persontype == "Admin")
            {
                var adminDTO = await Client.GetFromJsonAsync<ResponseAdminDTO>("https://localhost:44397/api/Admin/One/" + personId);

                admin = _mapper.Map<ResponseAdminVM>(adminDTO);
            }
            else if (persontype == "Teacher")
            {
                var teacherDTO = await Client.GetFromJsonAsync<ResponseTeacherDTO>("https://localhost:44397/api/Teacher/One/" + personId);
                var lessonsDTO = await Client.GetFromJsonAsync<List<ResponseLessonDTO>>("https://localhost:44397/api/Lesson/GetAllTeacherLessons/" + personId);

                teacher = _mapper.Map<ResponseTeacherVM>(teacherDTO);
                var teacherLessons = _mapper.Map<List<ResponseLessonVM>>(lessonsDTO);
                foreach(var lesson in teacherLessons)
                {
                    if (lesson.Stop > DateTime.Now)
                    {
                        teacherFutureLessons.Add(lesson);
                    }
                    if (lesson.Stop < DateTime.Now)
                    {
                        teacherPastLessons.Add(lesson);
                    }
                }
                teacherPastLessons = teacherPastLessons.OrderByDescending(x => x.Stop).ToList();

            }
            else
            {
                var studentDTO = await Client.GetFromJsonAsync<ResponseStudentDTO>("https://localhost:44397/api/Student/One/" + personId);
                var lessonsDTO = await Client.GetFromJsonAsync<List<ResponseLessonDTO>>("https://localhost:44397/api/Lesson/GetAllStudentLessons/" + personId);

                student = _mapper.Map<ResponseStudentVM>(studentDTO);
                var studentLessons = _mapper.Map<List<ResponseLessonVM>>(lessonsDTO);
                foreach (var lesson in studentLessons)
                {
                    if (lesson.Stop > DateTime.Now)
                    {
                        studentFutureLessons.Add(lesson);
                    }
                    if (lesson.Stop < DateTime.Now)
                    {
                        studentPastLessons.Add(lesson);
                    }
                    studentPastLessons = studentPastLessons.OrderByDescending(x => x.Stop).ToList();
                }
            }

        }
        NotifyChangedState();
    }

    public void LessonDetails(int id)
    {
        
        NavManager.NavigateTo($"/lessondetails/{id}");
    }

    public async void DeleteAlert(int id)
    {
        await Authentication();
        alerts.Clear();
        var response = await Client.DeleteAsync("https://localhost:44397/api/alert/delete/" + id);
        if (response.IsSuccessStatusCode)
        {
            var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + user.Id);
            if (alertsResponse.Count != 0)
            {
                alerts = _mapper.Map<List<ResponseAlertVM>>(alertsResponse);
                hiddenAlertLine = false;
            }
            else
            {
                hiddenAlertLine = true;
            }
        }
        NotifyChangedState();
    }

    //methods

    private void NotifyChangedState() => StateHasChanged();

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
