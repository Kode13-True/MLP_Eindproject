@page "/auth/LogIn"
@layout MainLayout

@inject IMapper _mapper
@inject HttpClient Client
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<CascadingAuthenticationState>
    <div class="container-fluid p-5">
        <h1 class="display-3">Register</h1>
        <hr class="my-4">
        <form class="container">
            <AuthorizeView Context="AuthorizeContext">
                <Authorized>
                    <div class="container text-center pb-4">
                        <h3>You are already rlogged in. <br />Go to <a href="/">Home</a></h3>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <EditForm Context="EditformContext" Model="model" OnValidSubmit="LoginUser">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-4"></div>
                            <div class="col-md-4">
                                <div><ValidationSummary /></div>
                            </div>
                            <div class="col-md-4"></div>
                        </div>
                        <div class="row">
                            <div class="col-md-4"></div>
                            <div class="col-md-4 justify-content-center">
                                <div hidden="@hiddenMessage" class="alert alert-info justify-content-center">@message <span @onclick="HideMessage" class="float-end" style="cursor: pointer">x</span></div>
                            </div>
                            <div class="col-md-4"></div>
                        </div>


                        <div class="row">
                            <div class="col-md-3"></div>
                            <label class="col-md-1 form-label">Email</label>
                            <div class="col-md-5">
                                <input class="form-control" type="email" placeholder="name@example" @bind-value="model.Email" />
                            </div>
                        </div>
                        <div class="row pb-3">
                            <div class="col-md-3"></div>
                            <label class="col-md-1 form-label">Password</label>
                            <div class="col-md-5">
                                <input class="form-control" type="password" placeholder="name@example" @bind-value="model.Password" />
                            </div>
                        </div>

                        <div class="col-12 d-flex justify-content-center">
                            <button class="btn btn-secondary w-25 mb-2" style="" type="submit" disabled="@isBusy">Login</button>
                        </div>
                        <div class="col-12 d-flex justify-content-center">
                            Don't have an account yet?
                        </div>
                        <div class="col-12 d-flex justify-content-center">
                            <a href="/auth/Register">Register</a>
                        </div>



                        






                        @*<div class="col-md-12">
             <label class="label">Email</label>
             <input type="text" placeholder="name@example" @bind-value="model.Email" />
         </div>
         <div class="col-md-12">
             <label class="label">Password</label>
             <input type="password" placeholder="Enter Password" @bind-value="model.Password" />
         </div>

         <br />

         <div class="col-12 d-flex justify-content-center">

         </div>
         <div class="col-12 d-flex justify-content-center" style="font-size: small">
             Don't have an account yet?
         </div>
         <div class="col-12 d-flex justify-content-center" style="font-size: small">
             <a href="/auth/Register">Register</a>
        </div>*@

                    </EditForm>
                </NotAuthorized>
            </AuthorizeView>
        </form>
    </div>
</CascadingAuthenticationState>

    @code {
        LoginUserVM model = new LoginUserVM();

        bool isBusy = false;

        bool hiddenMessage = true;

        string message = "Login credentials are not correct.";

        public async void LoginUser()
        {
            isBusy = true;
            var modelDTO = _mapper.Map<LoginUserDTO>(model);
            var response = await Client.PostAsJsonAsync("https://localhost:44397/api/User/LogIn", modelDTO);
            if (response.IsSuccessStatusCode)
            {
                string token = await response.Content.ReadAsStringAsync();
                var authResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/User/Authenticate", token);

                var authString = await authResponse.Content.ReadAsStringAsync();
                var authContent = (ResponseAuthenticationDTO)JsonConvert.DeserializeObject(authString, typeof(ResponseAuthenticationDTO));

                var userInfo = new LocalAuthUser()
                {
                    Id = authContent.Id,
                    Role = authContent.PersonType,
                    AuthToken = token
                };

                await LocalStorage.SetItemAsync<LocalAuthUser>("User", userInfo);
                await AuthStateProvider.GetAuthenticationStateAsync();
                NavManager.NavigateTo($"/");
            }
            else
            {
                hiddenMessage = false;
                
            }
            isBusy = false;
            NotifyChangedState();
        }

        public void HideMessage()
        {
            hiddenMessage = true;
        }
        private void NotifyChangedState() => StateHasChanged();
    }
