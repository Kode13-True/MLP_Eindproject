@page "/auth/LogIn"
@layout MainLayout

@inject IMapper _mapper
@inject HttpClient Client
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<div class="container-fluid pt-5 d-flex justify-content-center">
    <div class="row g-3">
        <div class="form-control col-md-6">
            <h4>Login</h4>

            <EditForm Model="model" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert alert-info col-md-12">@message <span @onclick="HideMessage">x</span></div>
                }
                <div class="col-md-12">
                    <label class="label">Email</label>
                    <input type="text" placeholder="name@example" @bind-value="model.Email" />
                </div>
                <div class="col-md-12">
                    <label class="label">Password</label>
                    <input type="password" placeholder="Enter Password" @bind-value="model.Password" />
                </div>

                <br />

                <div class="col-12 d-flex justify-content-center">
                    <button disabled="@isBusy" class="btn-register" style="" type="submit">Login</button>
                </div>
                <div class="col-12 d-flex justify-content-center" style="font-size: small">
                    Don't have an account yet?
                </div>
                <div class="col-12 d-flex justify-content-center" style="font-size: small">
                    <a disabled="@isBusy" href="/auth/Register">Register</a>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    LoginUserVM model = new LoginUserVM();

    bool isBusy = false;

    string message = string.Empty;

    public async void LoginUser()
    {
        isBusy = true;
        var modelDTO = _mapper.Map<LoginUserDTO>(model);
        var response = await Client.PostAsJsonAsync("https://localhost:44397/api/User/LogIn", modelDTO);
        if (response.IsSuccessStatusCode)
        {
            string token = await response.Content.ReadAsStringAsync();
            var authResponse = await Client.PostAsJsonAsync("https://localhost:44397/api/User/Authenticate", token);

            var authString = await authResponse.Content.ReadAsStringAsync();
            var authContent = (ResponseAuthenticationDTO)JsonConvert.DeserializeObject(authString, typeof(ResponseAuthenticationDTO));

            var userInfo = new LocalAuthUser()
            {
                Id = authContent.Id,
                Role = authContent.PersonType,
                AuthToken = token
            };

            await LocalStorage.SetItemAsync<LocalAuthUser>("User", userInfo);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavManager.NavigateTo($"/");
        }
        else
        {
            message = "Login credentials are not correct.";
        }
        isBusy = false;
    }

    public void HideMessage()
    {
        message = string.Empty;
    }
}
