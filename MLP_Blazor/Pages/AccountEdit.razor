@page "/AccountEdit"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<div class="container-fluid p-5">

    <CascadingAuthenticationState>
        <h1 class="display-3">Mubster Account Edit</h1>
        <hr class="my-4">
        <div class="container">
            <AuthorizeView>
                <Authorized>

                    @if (@context.User.IsInRole("Admin"))
                    {
                            <EditForm Model="admin" OnValidSubmit="EditAdmin" Context="EditAdmin">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-md-2"></div>
                                    <div class="col-md-8">
                                        <div><ValidationSummary /></div>
                                    </div>
                                    <div class="col-md-2"></div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-2 form-label">FirstName</label>
                                    <div class="col-md-6">
                                        <input type="text" class="form form-control" placeholder=@admin.FirstName @bind-value="admin.FirstName" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-2 form-label">LastName</label>
                                    <div class="col-md-6">
                                        <input type="text" class="form form-control" placeholder=@admin.LastName @bind-value="admin.LastName" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2"></div>
                                    <label class="col-md-2 form-label">Email</label>
                                    <div class="col-md-6">
                                        <input type="text" class="form form-control" placeholder=@admin.Email @bind-value="admin.Email" />
                                    </div>
                                </div>

                                <div class="row pt-1">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-3 float-end">
                                        <a href="Account" class="btn btn-primary w-50 m-1 float-end">Back</a>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="btn btn-succes w-50 m-1" type="submit">Save</button>
                                    </div>
                                </div>

                            </EditForm>
                    }
                    else if (@context.User.IsInRole("Teacher"))
                    {
                        <EditForm Model="teacher" OnValidSubmit="EditTeacher" Context="EditTeacher">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-2"></div>
                                <div class="col-md-8">
                                    <div><ValidationSummary /></div>
                                </div>
                                <div class="col-md-2"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">FirstName</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@teacher.FirstName @bind-value="teacher.FirstName" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">LastName</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@teacher.LastName @bind-value="teacher.LastName" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Email</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@teacher.Email @bind-value="teacher.Email" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Description</label>
                                <div class="col-md-6">
                                    <textarea placeholder=@teacher.Description rows="5" class="form-control" @bind="teacher.Description" style="width:100%" />
                                </div>
                            </div>
                            <div class="row pt-1">
                                <div class="col-md-4"></div>
                                <div class="col-md-3 float-end">
                                    <a href="Account" class="btn btn-primary float-end w-50 m-1">Back</a>
                                </div>
                                <div class="col-md-3">
                                    <button class="btn btn-succes w-50 m-1" type="submit">Save</button>
                                </div>
                            </div>
                        </EditForm>
                    }
                    else if (@context.User.IsInRole("Student"))
                    {
                        
                        <EditForm Model="student" OnValidSubmit="EditStudent" Context="EditStudent">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-2"></div>
                                <div class="col-md-8">
                                    <div><ValidationSummary /></div>
                                </div>
                                <div class="col-md-2"></div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">FirstName</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@student.FirstName @bind-value="student.FirstName" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">LastName</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@student.LastName @bind-value="student.LastName" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 form-label">Email</label>
                                <div class="col-md-6">
                                    <input type="text" class="form form-control" placeholder=@student.Email @bind-value="student.Email" />
                                </div>
                            </div>

                            <div class="row pt-1">
                                <div class="col-md-4"></div>
                                <div class="col-md-3 float-end">
                                    <a href="Account" class="btn btn-primary float-end w-50 m-1">Back</a>
                                </div>
                                <div class="col-md-3">
                                    <button class="btn btn-succes w-50  m-1" type="submit">Save</button>
                                </div>
                            </div>
                        </EditForm>                        
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="container">
                        <div class="text-center"> login please !</div>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </CascadingAuthenticationState>
</div>




@code {

    public EditTeacherVM teacher = new EditTeacherVM();
    public EditStudentVM student = new EditStudentVM();
    public EditAdminVM admin = new EditAdminVM();

    [Parameter]
    public int PersonId { get; set; }
    public string PersonType { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Authentication();
        var user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        if (user is not null)
        {
            PersonType = user.Role.ToString();
            PersonId = user.Id;


            if (PersonType == "Admin")
            {
                var responseAdmin = await Client.GetFromJsonAsync<EditAdminDTO>("https://localhost:44397/api/Admin/One/" + PersonId);
                admin = _mapper.Map<EditAdminVM>(responseAdmin);
            }
            else if (PersonType == "Teacher")
            {

                var responseTeacher = await Client.GetFromJsonAsync<EditTeacherDTO>("https://localhost:44397/api/Teacher/One/" + PersonId);
                teacher = _mapper.Map<EditTeacherVM>(responseTeacher);

            }
            else
            {
                var studentDTO = await Client.GetFromJsonAsync<EditStudentDTO>("https://localhost:44397/api/Student/One/" + PersonId);
                student = _mapper.Map<EditStudentVM>(studentDTO);
            }

        }
    }
    protected async void EditAdmin()
    {
        await Authentication();
        var AdminDTO = _mapper.Map<EditAdminDTO>(admin);
        var response = await Client.PutAsJsonAsync("https://localhost:44397/api/Admin/Update/" + PersonId, AdminDTO);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Account");
        }
    }
    protected async void EditTeacher()
    {
        await Authentication();
        var teacherDTO = _mapper.Map<EditTeacherDTO>(teacher);
        var response = await Client.PutAsJsonAsync("https://localhost:44397/api/Teacher/Update/" + PersonId, teacherDTO);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Account");
        }
    }
    protected async void EditStudent()
    {
        await Authentication();
        var studentDTO = _mapper.Map<EditStudentDTO>(student);
        var response = await Client.PutAsJsonAsync("https://localhost:44397/api/Student/Update/" + PersonId, studentDTO);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Account");
        }
    }

    //Methods

    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }

}
