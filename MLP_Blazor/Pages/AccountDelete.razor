@page "/AccountDelete"

@inject HttpClient Client
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject IMapper _mapper
@inject ILocalStorageService LocalStorageService


<div class="container-fluid p-5">
    <CascadingAuthenticationState>
        <h1 class="display-3">Mubster Account</h1>
        <hr class="my-4">
        <AuthorizeView>
            <Authorized>
                @if (@context.User.IsInRole("Admin"))
                {
                    <div class="card-columns">
                        <div class="row">
                            @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                <img src="/images/users.png" class="card-img-top" alt="...">
                            </div>*@
                            <div class="card d-inline-block m-auto" style="width: 36rem;">

                                <div class="card-body align-content-center">
                                    <h1 class="card-title text-center">@admin.FirstName @admin.LastName</h1>
                                    <h6 class="card-title text-center">Mubster admin since: @admin.DOC.ToShortDateString()</h6>
                                    <p class="card-text mx-1">Mail: <div class="float-end">@admin.Email</div></p>
                                    <h6 class="card-title text-center" mx-1>You're account will be permanently deleted are you sure ?</h6>
                                    <p class="card-footer text-center">
                                        <a href="Account" class="btn btn-succes w-25">NO</a>
                                        <button class="btn btn-danger w-25" @onclick="DeleteAdmin">YES</button>
                                    </p>
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (@context.User.IsInRole("Teacher"))
                {
                    <div class="card-columns">
                        <div class="row">
                            @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                <img src="/images/users.png" class="card-img-top" alt="...">
                            </div>*@
                            <div class="card d-inline-block m-auto" style="width: 36rem;">

                                <div class="card-body align-content-center">
                                    <h1 class="card-title text-center">@teacher.FirstName @teacher.LastName</h1>
                                    <h6 class="card-title text-center">Mubster teacher since: @teacher.DOC.ToShortDateString()</h6>
                                    <p class="card-text mx-1">Mail: <div class="float-end">@teacher.Email</div></p>
                                    <h6 class="card-title text-center" mx-1>You're account will be permanently deleted are you sure ?</h6>
                                    <p class="card-footer text-center">
                                        <a href="Account" class="btn btn-succes w-25">NO</a>
                                        <button class="btn btn-danger w-25" @onclick="DeleteTeacher">YES</button>
                                    </p>

                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card-columns">
                        <div class="row">
                            @*<div class="card d-inline-block m-auto" style="width: 18rem;">
                                <img src="/images/users.png" class="card-img-top" alt="...">
                            </div>*@
                            <div class="card d-inline-block m-auto" style="width: 36rem;">

                                <div class="card-body align-content-center">
                                    <h1 class="card-title text-center">@student.FirstName @student.LastName</h1>
                                    <h6 class="card-title text-center">Mubster student since: @student.DOC.ToShortDateString()</h6>
                                    <p class="card-text mx-1">Mail: <div class="float-end">@student.Email</div></p>
                                    <h6 class="card-title text-center" mx-1>You're account will be permanently deleted are you sure ?</h6>
                                    <p class="card-footer text-center">
                                        <a href="Account" class="btn btn-succes w-25">NO</a>
                                        <button class="btn btn-danger w-25" @onclick="DeleteTeacher">YES</button>
                                    </p>

                                </div>
                            </div>
                        </div>
                    </div>
                }

            </Authorized>
            <NotAuthorized>
                <div class="container">
                    <div class="text-center"> login please !</div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        


    </CascadingAuthenticationState>
</div>

@code {
    public ResponseTeacherVM teacher = new ResponseTeacherVM();
    public ResponseStudentVM student = new ResponseStudentVM();
    public ResponseAdminVM admin = new ResponseAdminVM();

    [Parameter]
    public int PersonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Authentication();
        var user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");

        if (user is not null)
        {
            var persontype = user.Role.ToString();
            PersonId = user.Id;


            if (persontype == "Admin")
            {
                var adminDTO = await Client.GetFromJsonAsync<ResponseAdminDTO>("https://localhost:44397/api/Admin/One/" + PersonId);

                admin = _mapper.Map<ResponseAdminVM>(adminDTO);
            }
            else if (persontype == "Teacher")
            {
                var teacherDTO = await Client.GetFromJsonAsync<ResponseTeacherDTO>("https://localhost:44397/api/Teacher/One/" + PersonId);

                teacher = _mapper.Map<ResponseTeacherVM>(teacherDTO);
            }
            else
            {
                var studentDTO = await Client.GetFromJsonAsync<ResponseStudentDTO>("https://localhost:44397/api/Student/One/" + PersonId);

                student = _mapper.Map<ResponseStudentVM>(studentDTO);
            }

        }
    }
    protected async void DeleteAdmin()
    {
        await Authentication();
        var response = await Client.DeleteAsync("https://localhost:44397/api/Admin/Delete/" + PersonId);

        if (response.IsSuccessStatusCode)
        {
            var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
            await localStateAuthProvider.LogoutAsync();
            NavManager.NavigateTo("/");
        }
    }
    protected async void DeleteTeacher()
    {
        await Authentication();
        var response = await Client.DeleteAsync("https://localhost:44397/api/Teacher/Delete/" + PersonId);

        if (response.IsSuccessStatusCode)
        {
            var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
            await localStateAuthProvider.LogoutAsync();
            NavManager.NavigateTo("/");
        }
    }
    protected async void DeleteStudent()
    {
        await Authentication();

        var response = await Client.DeleteAsync("https://localhost:44397/api/Student/Delete/" + PersonId);

        if (response.IsSuccessStatusCode)
        {
            var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
            await localStateAuthProvider.LogoutAsync();
            NavManager.NavigateTo("/");
        }
    }

    //methods
    public async Task Authentication()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)AuthStateProvider;
        var sessionExpired = await localStateAuthProvider.AuthenticationForLoginSession(Client);
        if (sessionExpired is true)
        {
            NavManager.NavigateTo("/auth/login");
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        var navUri = NavManager.Uri;
        if (firstRender)
        {
            var timer = new Timer(new TimerCallback(_ =>
            {
                if (navUri == NavManager.Uri)
                {
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
                }

            }), null, 600000, 600000);
        }
    }
}
