@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager
@inject ILocalStorageService LocalStorageService
@inject HttpClient Client

<CascadingAuthenticationState>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom mb-3 fixed-top">

        <div class="container-fluid px-5">
            <a class="navbar-brand" asp-area="" asp-page="/Index">the MUB</a>
            <button class="navbar-toggler" @onclick="ToggleNavMenu" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="@NavMenuCssClass navbar-collapse d-sm-inline-flex flex-sm-row-reverse" @onclick="ToggleNavMenu">
                <ul class="navbar-nav flex-grow-1">
                    <li class="nav-item ">
                        <a class="nav-link text-dark" href="" Match="NavLinkMatch.All">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" href="/availableLessons">Available Lessons</a>

                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-dark" href="teachers">Teachers</a>
                    </li>
                    <AuthorizeView>
                        <Authorized>
                            @if (context.User.IsInRole("Teacher"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" href="students">Student List</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" href="createlesson">New Lesson</a>
                                </li>

                            }
                        <li class="nav-item">
                            @if (context.User.IsInRole("Admin"))
                            {
                                <a class="nav-link text-dark" href="Account">Account</a>
                            }
                            else
                            {
                                @if (alertCount > 0)
                                {<a class="nav-link text-dark" href="Account">Account <span class="badge bg-danger rounded-pill mt-0">@alertCount</span></a>}
                                else
                                {<a class="nav-link text-dark" href="Account">Account <span class="badge bg-secondary rounded-pill mt-0">@alertCount</span></a>}
                            }


                        </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" style="cursor: pointer" @onclick="logout">Logout</a>
                            </li>
                        </Authorized>
                        <NotAuthorized>
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="/auth/register">Register</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" href="/auth/login">Login</a>
                            </li>
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
            </div>
        </div>
    </nav>
</CascadingAuthenticationState>

@code {

    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    int alertCount = 0;

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorageService.GetItemAsync<LocalAuthUser>("User");
        if(user is not null)
        {
            if (user.Role is PersonType.Admin)
            {

            }
            else
            {
                var alertsResponse = await Client.GetFromJsonAsync<List<ResponseAlertDTO>>("https://localhost:44397/api/alert/GetAllByPersonId/" + user.Id);
                alertCount = alertsResponse.Count();
            }
        }
    }



    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    async void logout()
    {
        var localStateAuthProvider = (LocalStateAuthProvider)authenticationStateProvider;
        await localStateAuthProvider.LogoutAsync();
        navManager.NavigateTo("/auth/login");
    }
    public void NotifyStateChange() => StateHasChanged();
        
       
}
