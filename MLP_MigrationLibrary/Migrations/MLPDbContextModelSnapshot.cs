// <auto-generated />
using System;
using MLP_DbLibrary.MLPContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MLP_MigrationLibrary.Migrations
{
    [DbContext(typeof(MLPDbContext))]
    partial class MLPDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MLP_DbLibrary.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstrumentName")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentStyle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("LessonLevel")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Stop")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Township")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.PersonInstrument", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "InstrumentId");

                    b.HasIndex("InstrumentId");

                    b.ToTable("PersonInstruments");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.PersonLesson", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("PersonLesson");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Lesson", b =>
                {
                    b.HasOne("MLP_DbLibrary.Models.Location", "Location")
                        .WithMany("Lessons")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.PersonInstrument", b =>
                {
                    b.HasOne("MLP_DbLibrary.Models.Instrument", "Instrument")
                        .WithMany("PersonInstruments")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLP_DbLibrary.Models.Person", "Person")
                        .WithMany("PersonInstruments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.PersonLesson", b =>
                {
                    b.HasOne("MLP_DbLibrary.Models.Lesson", "Lesson")
                        .WithMany("PersonLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MLP_DbLibrary.Models.Person", "Person")
                        .WithMany("PersonLessons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Instrument", b =>
                {
                    b.Navigation("PersonInstruments");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Lesson", b =>
                {
                    b.Navigation("PersonLessons");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Location", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("MLP_DbLibrary.Models.Person", b =>
                {
                    b.Navigation("PersonInstruments");

                    b.Navigation("PersonLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
